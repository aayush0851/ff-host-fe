// For DOM containers
// Replacement of fxLayout
// eg, fxLayout="row" -> @include ff-fx-layout(row)
// eg, fxLayout.xs="row" -> @include ff-fx-layout(row, xs)
@mixin ff-fx-layout($direction, $sizes...) {
  @include ff-only-for-screen-sizes($sizes...) {
    display: flex;
    flex-direction: $direction;
  }
}

// Given css will be added only for the specified size classes.
@mixin ff-only-for-screen-sizes($sizes...) {
  @if (length($sizes) > 0) {
    $selectors: ();
    @each $size in $sizes {
      $selectors: join(
          $selectors,
          unquote(":host-context(.#{$size}) & "),
          comma
      );
    }
    #{$selectors} {
      @content;
    }
  } @else {
    @content;
  }
}

// For DOM containers
// Replacement of fxLayoutAlign
// eg, fxLayoutAlignment="flex-start center" -> @include ff-fx-layout-alignment(flex-start, center)
@mixin ff-fx-layout-alignment(
  $main-axis-alignment,
  $cross-axis-alignment,
  $sizes...
) {
  @include ff-only-for-screen-sizes($sizes...) {
    justify-content: $main-axis-alignment;
    align-items: $cross-axis-alignment;
    align-content: $cross-axis-alignment;
  }
}

// For DOM containers
// Replacement of fxLayout with fxLayoutGap
// eg, fxLayout="row" fxLayoutGap="10px" -> @include ff-fx-layout-with-gap(row, 10px)
// eg, fxLayout.xs="row" fxLayoutGap.xs="10px" -> @include ff-fx-layout-with-gap(row, 10px, xs)
@mixin ff-fx-layout-with-gap($direction, $value, $sizes...) {
  @include ff-fx-layout($direction, $sizes...);
  @include ff-only-for-screen-sizes($sizes...) {
    @if ($direction == row) {
      > * {
        margin-right: $value;
      }
      > *:last-child {
        margin-right: 0;
      }
    } @else if ($direction == column) {
      > * {
        margin-bottom: $value;
      }
      > *:last-child {
        margin-bottom: 0;
      }
    } @else if ($direction == row-reverse) {
      > * {
        margin-left: $value;
      }
      > *:last-child {
        margin-left: 0;
      }
    } @else if ($direction == column-reverse) {
      > * {
        margin-top: $value;
      }
      > *:last-child {
        margin-top: 0;
      }
    }
  }
}
// For DOM elements
// Replacement of fxFill
// eg, fxFill -> @include ff-fx-fill()
// eg, fxFill.gt-md -> @include ff-fx-fill(lg, xl)
@mixin ff-fx-fill($sizes...) {
  @include ff-only-for-screen-sizes($sizes...) {
    flex-basis: auto;
    flex-grow: 1;
    flex-shrink: 1;
  }
}

// For DOM elements
// Replacement of fxFlex="basis"
// eg, fxFlex="400px" -> @include ff-fx-flex(400px)
@mixin ff-fx-flex($basis, $sizes...) {
  @include ff-only-for-screen-sizes($sizes...) {
    flex-basis: $basis;
    flex-grow: 0;
    flex-shrink: 0;
  }
}


// For DOM elements
@mixin ff-line-clamp($line) {
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
